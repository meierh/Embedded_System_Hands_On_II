Task 2.3
    Implemented Adder IP (see Task2/Adder/src/Adder.bsv)
    Two write registers a and b at addresses 0xA000_0000 and 0xA000_0004 (global)
    A read register c at address 0xA000_0008
    The IP core implements the function c = a + b
    The computation is only done if a and b are valid inputs and a or b have been written to since the last computation of c 
    
Task 2.4
    Implemented Adder IP Tests (see Task2/Adder/src/TestsMainTest.bsv)
    Tested multiple scenarios:
        Write a and b and read c
        Read c multiple times
        Updating only a and reading c
        Updating only b and reading c
        Updating b with one number an updating b again with another and read c afterwards
    
Task 2.5
    Created IP core of Adder:       make SIM_TYPE=VERILOG ip
    Re-done Vivado project creation from Task 1.6 and 1.7 replacing MysteryRegs with Adder and every task1 with task2
    Check Adder Address Editor : Master Base Address 0xA000_0000
    Mark AXI Connection from Interconnect to Adder as debug
    Add System ILA
    Connect AXI, Clock and Reset identically as Adder
    Add 2xDebug Bridge
    Configure Debug Bridge 0
        Double Click on IP Core -> Debug Modes -> Bridge Type -> Set "From AXI to BSCAN"
                                   BSCAN Options -> JTAG Fallback Options -> Set "Internal BSCAN Primitive"
    Configure Debug Bridge 1
        Double Click on IP Core -> Debug Modes -> Bridge Type -> Set "From BSCAN to DebugHub"
        
    Connect ports (Image given as system_task2.pdf)
    Create HDL Wrapper:     Sources -> Design Sources -> system_task1 -> right click -> Create HDL Wrapper -> Ok
    Create Bitstream
    Copy .bit.bin to Ultra96
    Check copy by comparing sha256sum results
    Load bitstream using "LoadBitstream.sh" with root privileges (see file in Task2/)
    Check for blue light on board
    
    Write Task2_5_AdderDebug.c to examine Adder (see file in Task2/)
    Execute Task2_5_AdderDebug
    See Task2_5_AdderDebug_PRINTOUT file
    
    Goto:   Vivado/Vivado/2023.2/data/xicom/cable_drivers/lin64/install_script/install_drivers
    And execute: sudo ./install_drivers
    Open Hardware Manager
    Execute Autoconnect
    
    Analysis on the basis and in order of "Task_2_5_Debugger.c" (see file in Task2/)
    
        Trigger on AWVALID == 1 to detect write a=13
            see Task2/ILA_Analysis_WriteA_1.png -- transfer of 13 between cycle 512 and 515
            
        Trigger on WDATA == 0x0000_0057 to detect write b=87
            see Task2/ILA_Analysis_WriteB_1.png -- transfer of 87 between cycle 513 and 516
            
        Trigger on RDATA == 0x0000_0064 to detect read c=100
            see Task2/ILA_Analysis_ReadC_1.png -- transfer of 100 between cycle 510 and 513
            
        Trigger on WDATA == 0x0000_0021 to detect write a=33
            see Task2/ILA_Analysis_WriteA_2.png -- transfer of 33 between cycle 513 and 516
            
        Trigger on RDATA == 0x0000_0078 to detect read c=120
            see Task2/ILA_Analysis_WriteC_3.png -- transfer of 120 between cycle 510 and 513
            
        Trigger on WDATA == 0x0000_0039 to detect write b=57
            see Task2/ILA_Analysis_WriteB_2.png -- transfer of 57 between cycle 513 and 516
            
        Trigger on WDATA == 0x0000_001b to detect write b=27
            see Task2/ILA_Analysis_WriteB_3.png -- transfer of 27 between cycle 516 and 519
            
        Trigger on RDATA == 0x0000_005a to detect read c=90
            see Task2/ILA_Analysis_WriteC_4.png -- transfer of 90 between cycle 510 and 513
